name: Deployment Tests

on:
  workflow_dispatch:

jobs:
  deployment-tests:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME_BACKEND: modularizer/netwiz-backend
      IMAGE_NAME_FRONTEND: modularizer/netwiz-frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get build commit hash
      id: build_commit
      run: |
        echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "commit_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "Build commit hash: $(git rev-parse HEAD)"
        echo "Build commit short: $(git rev-parse --short HEAD)"

    - name: Verify required images exist
      run: |
        echo "üîç Verifying all required images are available..."

        # Check if backend image exists
        BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:main"
        echo "Checking backend image: $BACKEND_IMAGE"
        if docker manifest inspect $BACKEND_IMAGE >/dev/null 2>&1; then
          echo "‚úÖ Backend image exists"
        else
          echo "‚ùå Backend image not found: $BACKEND_IMAGE"
          echo "Waiting for backend build to complete..."
          exit 1
        fi

        # Check if frontend image exists
        FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:main"
        echo "Checking frontend image: $FRONTEND_IMAGE"
        if docker manifest inspect $FRONTEND_IMAGE >/dev/null 2>&1; then
          echo "‚úÖ Frontend image exists"
        else
          echo "‚ùå Frontend image not found: $FRONTEND_IMAGE"
          echo "Waiting for frontend build to complete..."
          exit 1
        fi

        echo "‚úÖ All required images are available"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test Production Docker Compose
      run: |
        echo "üöÄ Testing Production Docker Compose Setup"
        echo "=========================================="

        # Use the exact oneliner provided by the user
        COMPOSE_PROJECT_NAME=netwiz f=$(mktemp) &&
        curl -fsSL https://raw.githubusercontent.com/modularizer/NetWiz/main/docker-compose.prod.yml -o "$f" &&
        trap 'docker-compose -p netwiz -f "$f" down --rmi all --volumes --remove-orphans; rm -f "$f"' EXIT &&
        docker-compose -p netwiz -f "$f" up -d

        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 5

        # Test backend health
        echo "Testing backend health..."
        for i in {1..10}; do
          if HEALTH_RESPONSE=$(curl -s http://localhost:5000/health); then
            echo "‚úÖ Backend health check passed"
            echo "Health response: $HEALTH_RESPONSE"
            # Check if MongoDB is connected
            if echo "$HEALTH_RESPONSE" | jq -e '.mongodb == "connected"' >/dev/null 2>&1; then
              echo "‚úÖ MongoDB connection verified"
            else
              echo "‚ö†Ô∏è  MongoDB status: $(echo "$HEALTH_RESPONSE" | jq -r '.mongodb // "unknown"')"
            fi
            break
          else
            echo "‚è≥ Backend not ready yet, attempt $i/10..."
            sleep 5
          fi
        done

        # Test backend root endpoint
        echo "Testing backend root endpoint..."
        BACKEND_RESPONSE=$(curl -s http://localhost:5000/)
        echo "Backend response: $BACKEND_RESPONSE"
        echo "$BACKEND_RESPONSE" | jq -e '.message' || echo "Warning: Backend root endpoint not returning expected JSON"

        # Validate backend git commit hash
        echo "Validating backend git commit hash..."
        BACKEND_COMMIT=$(echo "$BACKEND_RESPONSE" | jq -r '.git.commit_hash // empty')
        if [ "$BACKEND_COMMIT" = "${{ steps.build_commit.outputs.commit_hash }}" ]; then
          echo "‚úÖ Backend commit hash matches build: $BACKEND_COMMIT"
        else
          echo "‚ùå Backend commit hash mismatch!"
          echo "  Expected: ${{ steps.build_commit.outputs.commit_hash }}"
          echo "  Got: $BACKEND_COMMIT"
          exit 1
        fi

        # Test backend API info
        echo "Testing backend API info..."
        curl -f http://localhost:5000/info || echo "Warning: Backend info endpoint not available"

        echo "‚úÖ Production Docker Compose test completed successfully"

    - name: Test Local Docker Compose
      run: |
        echo "üè† Testing Local Docker Compose Setup"
        echo "===================================="

        # Use the exact oneliner provided by the user (with local file)
        COMPOSE_PROJECT_NAME=netwiz f=$(mktemp) &&
        curl -fsSL https://raw.githubusercontent.com/modularizer/NetWiz/main/docker-compose.local.yml -o "$f" &&
        trap 'docker-compose -p netwiz -f "$f" down --rmi all --volumes --remove-orphans; rm -f "$f"' EXIT &&
        docker-compose -p netwiz -f "$f" up -d

        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 5

        # Test backend health
        echo "Testing backend health..."
        for i in {1..10}; do
          if HEALTH_RESPONSE=$(curl -s http://localhost:5000/health); then
            echo "‚úÖ Backend health check passed"
            echo "Health response: $HEALTH_RESPONSE"
            # Check if MongoDB is connected
            if echo "$HEALTH_RESPONSE" | jq -e '.mongodb == "connected"' >/dev/null 2>&1; then
              echo "‚úÖ MongoDB connection verified"
            else
              echo "‚ö†Ô∏è  MongoDB status: $(echo "$HEALTH_RESPONSE" | jq -r '.mongodb // "unknown"')"
            fi
            break
          else
            echo "‚è≥ Backend not ready yet, attempt $i/10..."
            sleep 5
          fi
        done

        # Test frontend health
        echo "Testing frontend health..."
        for i in {1..10}; do
          if curl -f http://localhost:3000/; then
            echo "‚úÖ Frontend health check passed"
            break
          else
            echo "‚è≥ Frontend not ready yet, attempt $i/10..."
            sleep 5
          fi
        done

        # Test backend root endpoint
        echo "Testing backend root endpoint..."
        BACKEND_RESPONSE=$(curl -s http://localhost:5000/)
        echo "Backend response: $BACKEND_RESPONSE"
        echo "$BACKEND_RESPONSE" | jq -e '.message' || echo "Warning: Backend root endpoint not returning expected JSON"

        # Validate backend git commit hash
        echo "Validating backend git commit hash..."
        BACKEND_COMMIT=$(echo "$BACKEND_RESPONSE" | jq -r '.git.commit_hash // empty')
        if [ "$BACKEND_COMMIT" = "${{ steps.build_commit.outputs.commit_hash }}" ]; then
          echo "‚úÖ Backend commit hash matches build: $BACKEND_COMMIT"
        else
          echo "‚ùå Backend commit hash mismatch!"
          echo "  Expected: ${{ steps.build_commit.outputs.commit_hash }}"
          echo "  Got: $BACKEND_COMMIT"
          exit 1
        fi

        # Test frontend version endpoint
        echo "Testing frontend version endpoint..."
        FRONTEND_VERSION=$(curl -s http://localhost:3000/version.json)
        echo "Frontend version: $FRONTEND_VERSION"
        echo "$FRONTEND_VERSION" | jq -e '.frontend' || echo "Warning: Frontend version endpoint not returning expected JSON"

        # Validate frontend git commit hash
        echo "Validating frontend git commit hash..."
        FRONTEND_COMMIT=$(echo "$FRONTEND_VERSION" | jq -r '.frontend.commit_hash // empty')
        if [ "$FRONTEND_COMMIT" = "${{ steps.build_commit.outputs.commit_hash }}" ]; then
          echo "‚úÖ Frontend commit hash matches build: $FRONTEND_COMMIT"
        else
          echo "‚ùå Frontend commit hash mismatch!"
          echo "  Expected: ${{ steps.build_commit.outputs.commit_hash }}"
          echo "  Got: $FRONTEND_COMMIT"
          exit 1
        fi

        # Test backend API info
        echo "Testing backend API info..."
        curl -f http://localhost:5000/info || echo "Warning: Backend info endpoint not available"

        # Test frontend static assets
        echo "Testing frontend static assets..."
        curl -f http://localhost:3000/assets/ || echo "Warning: Frontend assets not being served"

        echo "‚úÖ Local Docker Compose test completed successfully"

    - name: Test GitHub Pages Deployment
      run: |
        echo "üåê Testing GitHub Pages Deployment"
        echo "=================================="

        # Wait a moment for GitHub Pages to be ready
        echo "Waiting for GitHub Pages deployment..."
        sleep 10

        # Test GitHub Pages site
        echo "Testing GitHub Pages site..."
        GITHUB_PAGES_URL="https://modularizer.github.io/NetWiz"

        # Test main page
        if curl -f "$GITHUB_PAGES_URL/" 2>/dev/null; then
          echo "‚úÖ GitHub Pages main page accessible"
        else
          echo "‚ùå GitHub Pages main page not accessible"
          exit 1
        fi

        # Test version.json asset
        echo "Testing version.json asset..."
        VERSION_RESPONSE=$(curl -s "$GITHUB_PAGES_URL/version.json" 2>/dev/null)
        if [ -n "$VERSION_RESPONSE" ]; then
          echo "‚úÖ Version asset accessible"
          echo "Version response: $VERSION_RESPONSE"

          # Validate frontend git commit hash from GitHub Pages
          echo "Validating frontend git commit hash from GitHub Pages..."
          FRONTEND_COMMIT=$(echo "$VERSION_RESPONSE" | jq -r '.frontend.commit_hash // empty' 2>/dev/null)
          if [ -n "$FRONTEND_COMMIT" ]; then
            if [ "$FRONTEND_COMMIT" = "${{ steps.build_commit.outputs.commit_hash }}" ]; then
              echo "‚úÖ GitHub Pages frontend commit hash matches build: $FRONTEND_COMMIT"
            else
              echo "‚ùå GitHub Pages frontend commit hash mismatch!"
              echo "  Expected: ${{ steps.build_commit.outputs.commit_hash }}"
              echo "  Got: $FRONTEND_COMMIT"
              exit 1
            fi
          else
            echo "‚ùå GitHub Pages frontend commit hash not found in version.json"
            exit 1
          fi
        else
          echo "‚ùå Version asset not accessible from GitHub Pages"
          exit 1
        fi

        # Test static assets
        echo "Testing static assets..."
        if curl -f "$GITHUB_PAGES_URL/assets/" 2>/dev/null; then
          echo "‚úÖ Static assets accessible"
        else
          echo "‚ö†Ô∏è  Static assets not accessible (this may be normal)"
        fi

        # Test that the app loads without errors
        echo "Testing app functionality..."
        HTML_RESPONSE=$(curl -s "$GITHUB_PAGES_URL/" 2>/dev/null)
        if echo "$HTML_RESPONSE" | grep -q "NetWiz"; then
          echo "‚úÖ App content found in GitHub Pages"
        else
          echo "‚ùå App content not found in GitHub Pages"
          exit 1
        fi

        echo "‚úÖ GitHub Pages deployment test completed successfully"

    - name: Deployment Test Summary
      run: |
        echo "üéâ Deployment Tests Summary"
        echo "============================"
        echo "‚úÖ Production Docker Compose: PASSED"
        echo "‚úÖ Local Docker Compose: PASSED"
        echo "‚úÖ GitHub Pages Deployment: PASSED"
        echo "‚úÖ Backend Health Checks: PASSED"
        echo "‚úÖ Frontend Health Checks: PASSED"
        echo "‚úÖ API Endpoints: PASSED"
        echo "‚úÖ Version Endpoints: PASSED"
        echo "‚úÖ Git Commit Hash Validation: PASSED"
        echo ""
        echo "üöÄ All deployment tests completed successfully!"
        echo "The NetWiz stack is ready for production deployment."
