/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/netlist/upload": {
    /**
     * Upload Netlist
     * @description Upload and validate a netlist
     *
     * This endpoint accepts a netlist in JSON format, validates it according to business rules,
     * and stores it in the database. The validation result is returned immediately.
     *
     * **Validation Rules:**
     * - Component names must not be blank
     * - Net names must not be blank
     * - All component IDs must be unique
     * - All net IDs must be unique
     * - GND net must be connected to all relevant components
     * - Each net must have at least one connection
     */
    post: operations["upload_netlist_netlist_upload_post"];
  };
  "/netlist/{submission_id}": {
    /**
     * Get Netlist
     * @description Retrieve a specific netlist submission by ID
     *
     * Returns the complete netlist submission data including the original netlist,
     * validation results, and metadata.
     */
    get: operations["get_netlist_netlist__submission_id__get"];
  };
  "/netlist": {
    /**
     * List Netlists
     * @description List netlist submissions with pagination
     *
     * Returns a paginated list of netlist submissions. Can be filtered by user ID
     * and supports pagination for large result sets.
     */
    get: operations["list_netlists_netlist_get"];
  };
  "/netlist/validate": {
    /**
     * Validate Netlist
     * @description Validate a netlist without storing it
     *
     * This endpoint performs validation on a netlist without storing it in the database.
     * Useful for real-time validation in frontend applications.
     */
    post: operations["validate_netlist_netlist_validate_post"];
  };
  "/health": {
    /**
     * Health Check
     * @description Health check endpoint for monitoring and load balancers
     *
     * Returns the current status of the API service including version and environment information.
     * This endpoint is used by monitoring systems, load balancers, and health check services.
     */
    get: operations["health_check_health_get"];
  };
  "/": {
    /**
     * Root
     * @description Root endpoint with basic API information
     *
     * Returns general information about the API including version, author, and available endpoints.
     * This is typically the first endpoint users encounter when exploring the API.
     */
    get: operations["root__get"];
  };
  "/info": {
    /**
     * Api Info
     * @description Detailed API information endpoint
     *
     * Returns comprehensive information about the API including all available endpoints,
     * version details, and service capabilities.
     */
    get: operations["api_info_info_get"];
  };
  "/kill": {
    /**
     * Kill Server
     * @description Kill the server (development only)
     *
     * This endpoint shuts down the server gracefully. Only available in development mode.
     * Useful for testing and development workflows.
     *
     * **WARNING**: This will terminate the server process!
     */
    post: operations["kill_server_kill_post"];
  };
  "/openapi.json": {
    /**
     * Get Openapi Schema
     * @description Get the OpenAPI schema as JSON
     *
     * This endpoint returns the complete OpenAPI 3.0 specification for the API,
     * including all endpoints, request/response models, and validation rules.
     */
    get: operations["get_openapi_schema_openapi_json_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * Component
     * @description Represents an electronic component in the netlist.
     *
     * A component is a discrete electronic part (resistor, capacitor, IC, etc.)
     * that can be placed on a PCB. Each component has a unique identifier,
     * a type classification, and a list of pins that define its connection points.
     *
     * Attributes:
     *     id: Unique identifier for the component (e.g., "U1", "R5", "C10")
     *     type: Component type from ComponentType enum
     *     pins: List of pins on this component (minimum 1 required)
     *     value: Optional component value (e.g., "10kΩ", "100nF", "3.3V")
     *     package: Optional physical package type (e.g., "SOIC-8", "0603")
     *     manufacturer: Optional manufacturer name (e.g., "Texas Instruments")
     *     part_number: Optional manufacturer part number (e.g., "LM358")
     *
     * Validation:
     *     - Component ID must be non-empty and unique within the netlist
     *     - At least one pin is required
     *     - All pin numbers must be unique within the component
     *
     * Example:
     *     ```python
     *     # Microcontroller
     *     mcu = Component(
     *         name="U1",
     *         type=ComponentType.IC,
     *         pins=[
     *             Pin(number="1", name="VCC", type=PinType.POWER),
     *             Pin(number="2", name="GND", type=PinType.GROUND),
     *             Pin(number="3", name="CLK", type=PinType.CLOCK)
     *         ],
     *         value="3.3V",
     *         package="QFP-32",
     *         manufacturer="STMicroelectronics",
     *         part_number="STM32F103C8T6"
     *     )
     *
     *     # Resistor
     *     resistor = Component(
     *         name="R1",
     *         type=ComponentType.RESISTOR,
     *         pins=[Pin(number="1", type=PinType.PASSIVE), Pin(number="2", type=PinType.PASSIVE)],
     *         value="10kΩ",
     *     )
     *     ```
     */
    "Component-Input": {
      /**
       * Name
       * @description Unique component name
       */
      name: string;
      /** @description Type of electronic component */
      type: components["schemas"]["ComponentType"];
      /**
       * Pins
       * @description List of pins on this component
       */
      pins: components["schemas"]["Pin"][];
      /**
       * Value
       * @description Component value (e.g., '10kΩ', '100nF')
       */
      value?: string | null;
      /**
       * Package
       * @description Component package type
       */
      package?: string | null;
      /**
       * Manufacturer
       * @description Component manufacturer
       */
      manufacturer?: string | null;
      /**
       * Part Number
       * @description Manufacturer part number
       */
      part_number?: string | null;
    };
    /**
     * Component
     * @description Represents an electronic component in the netlist.
     *
     * A component is a discrete electronic part (resistor, capacitor, IC, etc.)
     * that can be placed on a PCB. Each component has a unique identifier,
     * a type classification, and a list of pins that define its connection points.
     *
     * Attributes:
     *     id: Unique identifier for the component (e.g., "U1", "R5", "C10")
     *     type: Component type from ComponentType enum
     *     pins: List of pins on this component (minimum 1 required)
     *     value: Optional component value (e.g., "10kΩ", "100nF", "3.3V")
     *     package: Optional physical package type (e.g., "SOIC-8", "0603")
     *     manufacturer: Optional manufacturer name (e.g., "Texas Instruments")
     *     part_number: Optional manufacturer part number (e.g., "LM358")
     *
     * Validation:
     *     - Component ID must be non-empty and unique within the netlist
     *     - At least one pin is required
     *     - All pin numbers must be unique within the component
     *
     * Example:
     *     ```python
     *     # Microcontroller
     *     mcu = Component(
     *         name="U1",
     *         type=ComponentType.IC,
     *         pins=[
     *             Pin(number="1", name="VCC", type=PinType.POWER),
     *             Pin(number="2", name="GND", type=PinType.GROUND),
     *             Pin(number="3", name="CLK", type=PinType.CLOCK)
     *         ],
     *         value="3.3V",
     *         package="QFP-32",
     *         manufacturer="STMicroelectronics",
     *         part_number="STM32F103C8T6"
     *     )
     *
     *     # Resistor
     *     resistor = Component(
     *         name="R1",
     *         type=ComponentType.RESISTOR,
     *         pins=[Pin(number="1", type=PinType.PASSIVE), Pin(number="2", type=PinType.PASSIVE)],
     *         value="10kΩ",
     *     )
     *     ```
     */
    "Component-Output": {
      /**
       * Name
       * @description Unique component name
       */
      name: string;
      /** @description Type of electronic component */
      type: components["schemas"]["ComponentType"];
      /**
       * Pins
       * @description List of pins on this component
       */
      pins: components["schemas"]["Pin"][];
      /**
       * Value
       * @description Component value (e.g., '10kΩ', '100nF')
       */
      value?: string | null;
      /**
       * Package
       * @description Component package type
       */
      package?: string | null;
      /**
       * Manufacturer
       * @description Component manufacturer
       */
      manufacturer?: string | null;
      /**
       * Part Number
       * @description Manufacturer part number
       */
      part_number?: string | null;
    };
    /**
     * ComponentType
     * @description Enumeration of electronic component types.
     *
     * This enum defines the standard component categories used in PCB netlists.
     * Each type represents a different class of electronic components with
     * distinct electrical characteristics and usage patterns.
     *
     * Attributes:
     *     IC: Integrated circuits (microcontrollers, processors, etc.)
     *     RESISTOR: Passive components that resist electrical current
     *     CAPACITOR: Passive components that store electrical energy
     *     INDUCTOR: Passive components that store energy in magnetic fields
     *     DIODE: Semiconductor devices that allow current flow in one direction
     *     TRANSISTOR: Semiconductor devices for amplification/switching
     *     CONNECTOR: Mechanical interfaces for electrical connections
     *     OTHER: Components that don't fit standard categories
     * @enum {string}
     */
    ComponentType: "IC" | "RESISTOR" | "CAPACITOR" | "INDUCTOR" | "DIODE" | "TRANSISTOR" | "CONNECTOR" | "OTHER";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * HealthResponse
     * @description Health check response model
     */
    HealthResponse: {
      /**
       * Status
       * @description Service status
       */
      status: string;
      /**
       * Timestamp
       * Format: date-time
       * @description Current timestamp
       */
      timestamp: string;
      /**
       * Version
       * @description API version
       */
      version: string;
      /**
       * Environment
       * @description Environment (development/production)
       */
      environment: string;
    };
    /**
     * Net
     * @description Represents an electrical net (connection) in the netlist.
     *
     * A net is an electrical connection that links multiple component pins together.
     * All pins connected to the same net are electrically equivalent and share
     * the same voltage. Nets form the wiring topology of the circuit.
     *
     * Attributes:
     *     id: Unique identifier for the net (e.g., "VCC", "GND", "CLK", "DATA")
     *     connections: List of component pins connected to this net
     *     net_type: Optional classification of net purpose (e.g., "power", "signal", "ground")
     *
     * Validation:
     *     - Net ID must be non-empty and unique within the netlist
     *     - At least one connection is required
     *     - All referenced components and pins must exist in the netlist
     *
     * Example:
     *     ```python
     *     # Power supply net
     *     vcc_net = Net(
     *         name="VCC",
     *         connections=[
     *             NetConnection(component="U1", pin="1"),
     *             NetConnection(component="U2", pin="1")
     *         ],
     *         net_type="power"
     *     )
     *
     *     # Signal net
     *     clock_net = Net(
     *         name="CLK",
     *         connections=[
     *             NetConnection(component="U1", pin="3"),
     *             NetConnection(component="U2", pin="2")
     *         ],
     *         net_type="signal"
     *     )
     *     ```
     */
    Net: {
      /**
       * Name
       * @description Unique net name
       */
      name: string;
      /**
       * Connections
       * @description List of component pins connected to this net
       */
      connections: components["schemas"]["NetConnection"][];
      /** @description Type of net (e.g., 'power', 'signal', 'ground') */
      net_type?: components["schemas"]["NetType"] | null;
    };
    /**
     * NetConnection
     * @description Represents a connection between a net and a component pin.
     *
     * A NetConnection defines how a specific pin on a component is connected
     * to a net. This creates the electrical connectivity in the circuit.
     * Each connection must reference a valid component ID and pin number.
     *
     * Attributes:
     *     component: ID of the component this connection belongs to
     *     pin: Pin number/identifier on the component
     *
     * Validation:
     *     - Both component and pin identifiers must be non-empty
     *     - Component ID must exist in the netlist's components
     *     - Pin number must exist on the specified component
     *
     * Example:
     *     ```python
     *     # Connect pin 1 of component U1 to net VCC
     *     connection = NetConnection(component="U1", pin="1")
     *
     *     # Connect pin A1 of component R5 to net SIGNAL
     *     connection = NetConnection(component="R5", pin="A1")
     *     ```
     */
    NetConnection: {
      /**
       * Component
       * @description Component ID this connection belongs to
       */
      component: string;
      /**
       * Pin
       * @description Pin number on the component
       */
      pin: string;
    };
    /**
     * NetType
     * @description Enumeration of net electrical types and functions.
     *
     * This enum defines the electrical characteristics and signal types
     * for nets in the netlist. Each type represents a different electrical
     * function and usage pattern.
     *
     * Attributes:
     *     POWER: Net provides power supply voltage
     *     GROUND: Net provides ground reference
     *     SIGNAL: Net carries general purpose signals
     *     CLOCK: Net carries clock signals
     *     ANALOG: Net carries analog signals
     *     DIGITAL: Net carries digital signals
     *     DATA: Net carries data signals
     *     CONTROL: Net carries control signals
     *     OTHER: Net type that doesn't fit standard categories
     * @enum {string}
     */
    NetType: "power" | "ground" | "signal" | "clock" | "analog" | "digital" | "data" | "control" | "other";
    /**
     * Netlist
     * @description Complete netlist representing an electronic circuit
     */
    "Netlist-Input": {
      /**
       * Components
       * @description List of electronic components in the circuit
       */
      components: components["schemas"]["Component-Input"][];
      /**
       * Nets
       * @description List of electrical nets (connections) between components
       */
      nets: components["schemas"]["Net"][];
      /**
       * Metadata
       * @description Optional additional information about the netlist
       */
      metadata?: Record<string, never> | null;
    };
    /**
     * Netlist
     * @description Complete netlist representing an electronic circuit
     */
    "Netlist-Output": {
      /**
       * Components
       * @description List of electronic components in the circuit
       */
      components: components["schemas"]["Component-Output"][];
      /**
       * Nets
       * @description List of electrical nets (connections) between components
       */
      nets: components["schemas"]["Net"][];
      /**
       * Metadata
       * @description Optional additional information about the netlist
       */
      metadata?: Record<string, never> | null;
    };
    /**
     * NetlistGetResponse
     * @description Response model for retrieving a netlist
     */
    NetlistGetResponse: {
      /** @description The netlist submission data */
      submission: components["schemas"]["NetlistSubmission"];
    };
    /**
     * NetlistListResponse
     * @description Response model for listing netlists
     */
    NetlistListResponse: {
      /**
       * Submissions
       * @description List of netlist submissions
       */
      submissions: components["schemas"]["NetlistSubmission"][];
      /**
       * Total Count
       * @description Total number of submissions
       */
      total_count: number;
      /**
       * Page
       * @description Current page number
       */
      page: number;
      /**
       * Page Size
       * @description Number of items per page
       */
      page_size: number;
    };
    /**
     * NetlistSubmission
     * @description Represents a netlist submission with metadata
     */
    NetlistSubmission: {
      /**
       * Id
       * Format: uuid4
       * @description Unique submission ID
       */
      id: string;
      /** @description The netlist data */
      netlist: components["schemas"]["Netlist-Output"];
      /**
       * User Id
       * @description User who submitted the netlist
       */
      user_id?: string | null;
      /**
       * Submission Timestamp
       * Format: date-time
       * @description When the netlist was submitted
       */
      submission_timestamp?: string;
      /** @description Validation result for this submission */
      validation_result?: components["schemas"]["ValidationResult"] | null;
      /**
       * Filename
       * @description Original filename if uploaded from file
       */
      filename?: string | null;
    };
    /**
     * NetlistUploadRequest
     * @description Request model for uploading a netlist
     */
    NetlistUploadRequest: {
      /** @description The netlist data to upload */
      netlist: components["schemas"]["Netlist-Input"];
      /**
       * User Id
       * @description User ID for tracking submissions
       */
      user_id?: string | null;
      /**
       * Filename
       * @description Original filename if uploaded from file
       */
      filename?: string | null;
    };
    /**
     * NetlistUploadResponse
     * @description Response model for netlist upload
     */
    NetlistUploadResponse: {
      /**
       * Submission Id
       * Format: uuid4
       * @description Unique ID for this submission
       */
      submission_id: string;
      /**
       * Message
       * @description Success message
       */
      message: string;
      /** @description Validation result for the uploaded netlist */
      validation_result: components["schemas"]["ValidationResult"];
    };
    /**
     * Pin
     * @description Represents a pin on an electronic component.
     *
     * A pin is a physical connection point on a component that can be connected
     * to nets in the circuit.
     */
    Pin: {
      /**
       * Number
       * @description Pin number or identifier (e.g., '1', 'A1', 'VCC')
       */
      number: string;
      /**
       * Name
       * @description Optional pin name (e.g., 'VCC', 'GND', 'CLK')
       */
      name?: string | null;
      /** @description Pin electrical type and function */
      type?: components["schemas"]["PinType"] | null;
    };
    /**
     * PinType
     * @description Enumeration of pin electrical types and functions.
     *
     * This enum defines the electrical characteristics and signal flow direction
     * for component pins. Each type represents a different electrical
     * function and usage pattern.
     *
     * Attributes:
     *     INPUT: Pin receives signals from external sources
     *     OUTPUT: Pin drives signals to external loads
     *     BIDIRECTIONAL: Pin can both receive and drive signals
     *     POWER: Pin provides power supply voltage
     *     GROUND: Pin provides ground reference
     *     PASSIVE: Pin for passive components (resistors, capacitors, etc.)
     *     ANALOG: Pin for analog signals
     *     DIGITAL: Pin for digital signals
     *     CLOCK: Pin for clock signals
     *     RESET: Pin for reset signals
     *     OTHER: Pin type that doesn't fit standard categories
     * @enum {string}
     */
    PinType: "input" | "output" | "bidirectional" | "power" | "ground" | "passive" | "analog" | "digital" | "clock" | "reset" | "other";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * ValidationErrorType
     * @description Enumeration of validation error types.
     *
     * This enum defines all possible validation error types that can occur
     * during netlist validation. Each error type represents a specific
     * validation rule that was violated.
     *
     * Attributes:
     *     BLANK_COMPONENT_NAME: Component name is empty or whitespace-only
     *     BLANK_NET_NAME: Net name is empty or whitespace-only
     *     DUPLICATE_COMPONENT_NAME: Multiple components have the same name
     *     DUPLICATE_NET_NAME: Multiple nets have the same name
     *     MISSING_GROUND: No ground nets found in the netlist
     *     INSUFFICIENT_GND_CONNECTIONS: Ground net has fewer than 2 connections
     *     GROUND_PIN_NOT_CONNECTED_TO_GROUND: Pin marked as ground type is not connected to a ground net
     *     POWER_PIN_NOT_CONNECTED_TO_POWER: Pin marked as power type is not connected to a power net
     *     CLOCK_NET_SINGLE_CONNECTION: Clock net has only one connection (should typically have multiple)
     *     NET_TYPE_NAME_MISMATCH: Net type doesn't match net name convention
     *     MISNAMED_GROUND_NET: Net named like ground but typed as something else
     *     MISNAMED_POWER_NET: Net named like power but typed as something else
     *     MISNAMED_CLOCK_NET: Net named like clock but typed as something else
     *     ORPHANED_NET: Net has no connections
     *     UNCONNECTED_COMPONENT: Component is not connected to any net
     * @enum {string}
     */
    ValidationErrorType: "blank_component_name" | "blank_net_name" | "duplicate_component_name" | "duplicate_net_name" | "missing_ground" | "insufficient_gnd_connections" | "ground_pin_not_connected_to_ground" | "power_pin_not_connected_to_power" | "clock_net_single_connection" | "net_type_name_mismatch" | "misnamed_ground_net" | "misnamed_power_net" | "misnamed_clock_net" | "orphaned_net" | "unconnected_component";
    /**
     * ValidationRequest
     * @description Request model for validating a netlist
     */
    ValidationRequest: {
      /** @description The netlist data to validate */
      netlist: components["schemas"]["Netlist-Input"];
    };
    /**
     * ValidationResponse
     * @description Response model for netlist validation
     */
    ValidationResponse: {
      /** @description The validation result */
      validation_result: components["schemas"]["ValidationResult"];
    };
    /**
     * ValidationResult
     * @description Result of netlist validation with errors and warnings
     */
    ValidationResult: {
      /**
       * Is Valid
       * @description Whether the netlist passed validation
       */
      is_valid: boolean;
      /**
       * Errors
       * @description List of validation errors
       */
      errors?: components["schemas"]["ValidationError"][];
      /**
       * Warnings
       * @description List of validation warnings
       */
      warnings?: components["schemas"]["ValidationError"][];
      /**
       * Validation Timestamp
       * Format: date-time
       * @description When validation was performed
       */
      validation_timestamp?: string;
      /**
       * Validation Rules Applied
       * @description List of validation rules that were applied
       */
      validation_rules_applied?: components["schemas"]["ValidationErrorType"][];
      /**
       * Auto Fill Suggestions
       * @description Suggestions for auto-filling missing net types based on names
       */
      auto_fill_suggestions?: {
          [key: string]: string;
        }[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Upload Netlist
   * @description Upload and validate a netlist
   *
   * This endpoint accepts a netlist in JSON format, validates it according to business rules,
   * and stores it in the database. The validation result is returned immediately.
   *
   * **Validation Rules:**
   * - Component names must not be blank
   * - Net names must not be blank
   * - All component IDs must be unique
   * - All net IDs must be unique
   * - GND net must be connected to all relevant components
   * - Each net must have at least one connection
   */
  upload_netlist_netlist_upload_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["NetlistUploadRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["NetlistUploadResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Netlist
   * @description Retrieve a specific netlist submission by ID
   *
   * Returns the complete netlist submission data including the original netlist,
   * validation results, and metadata.
   */
  get_netlist_netlist__submission_id__get: {
    parameters: {
      path: {
        submission_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NetlistGetResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Netlists
   * @description List netlist submissions with pagination
   *
   * Returns a paginated list of netlist submissions. Can be filtered by user ID
   * and supports pagination for large result sets.
   */
  list_netlists_netlist_get: {
    parameters: {
      query?: {
        /** @description Filter by user ID */
        user_id?: string | null;
        /** @description Page number (1-based) */
        page?: number;
        /** @description Number of items per page */
        page_size?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NetlistListResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Validate Netlist
   * @description Validate a netlist without storing it
   *
   * This endpoint performs validation on a netlist without storing it in the database.
   * Useful for real-time validation in frontend applications.
   */
  validate_netlist_netlist_validate_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ValidationRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ValidationResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Health Check
   * @description Health check endpoint for monitoring and load balancers
   *
   * Returns the current status of the API service including version and environment information.
   * This endpoint is used by monitoring systems, load balancers, and health check services.
   */
  health_check_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["HealthResponse"];
        };
      };
    };
  };
  /**
   * Root
   * @description Root endpoint with basic API information
   *
   * Returns general information about the API including version, author, and available endpoints.
   * This is typically the first endpoint users encounter when exploring the API.
   */
  root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Api Info
   * @description Detailed API information endpoint
   *
   * Returns comprehensive information about the API including all available endpoints,
   * version details, and service capabilities.
   */
  api_info_info_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Kill Server
   * @description Kill the server (development only)
   *
   * This endpoint shuts down the server gracefully. Only available in development mode.
   * Useful for testing and development workflows.
   *
   * **WARNING**: This will terminate the server process!
   */
  kill_server_kill_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Openapi Schema
   * @description Get the OpenAPI schema as JSON
   *
   * This endpoint returns the complete OpenAPI 3.0 specification for the API,
   * including all endpoints, request/response models, and validation rules.
   */
  get_openapi_schema_openapi_json_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
