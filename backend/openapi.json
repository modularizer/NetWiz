{
  "openapi": "3.1.0",
  "info": {
    "title": "PCB Netlist Visualizer + Validator",
    "description": "A proof-of-concept application for visualizing and validating PCB netlist data",
    "version": "1.0.0"
  },
  "paths": {
    "/api/netlist/upload": {
      "post": {
        "tags": [
          "netlist"
        ],
        "summary": "Upload Netlist",
        "description": "Upload and validate a netlist\n\nThis endpoint accepts a netlist in JSON format, validates it according to business rules,\nand stores it in the database. The validation result is returned immediately.\n\n**Validation Rules:**\n- Component names must not be blank\n- Net names must not be blank\n- All component IDs must be unique\n- All net IDs must be unique\n- GND net must be connected to all relevant components\n- Each net must have at least one connection",
        "operationId": "upload_netlist_api_netlist_upload_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetlistUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetlistUploadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/netlist/{submission_id}": {
      "get": {
        "tags": [
          "netlist"
        ],
        "summary": "Get Netlist",
        "description": "Retrieve a specific netlist submission by ID\n\nReturns the complete netlist submission data including the original netlist,\nvalidation results, and metadata.",
        "operationId": "get_netlist_api_netlist__submission_id__get",
        "parameters": [
          {
            "name": "submission_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Submission Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetlistGetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/netlist": {
      "get": {
        "tags": [
          "netlist"
        ],
        "summary": "List Netlists",
        "description": "List netlist submissions with pagination\n\nReturns a paginated list of netlist submissions. Can be filtered by user ID\nand supports pagination for large result sets.",
        "operationId": "list_netlists_api_netlist_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number (1-based)",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number (1-based)"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of items per page",
              "default": 10,
              "title": "Page Size"
            },
            "description": "Number of items per page"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by user ID",
              "title": "User Id"
            },
            "description": "Filter by user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetlistListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/netlist/validate": {
      "post": {
        "tags": [
          "netlist"
        ],
        "summary": "Validate Netlist",
        "description": "Validate a netlist without storing it\n\nThis endpoint performs validation on a netlist without storing it in the database.\nUseful for real-time validation in frontend applications.",
        "operationId": "validate_netlist_api_netlist_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "system",
          "health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint for monitoring and load balancers\n\nReturns the current status of the API service including version and environment information.\nThis endpoint is used by monitoring systems, load balancers, and health check services.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "system",
          "health"
        ],
        "summary": "Root",
        "description": "Root endpoint with basic API information\n\nReturns general information about the API including version, author, and available endpoints.\nThis is typically the first endpoint users encounter when exploring the API.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "tags": [
          "system",
          "health"
        ],
        "summary": "Api Info",
        "description": "Detailed API information endpoint\n\nReturns comprehensive information about the API including all available endpoints,\nversion details, and service capabilities.",
        "operationId": "api_info_info_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/openapi.json": {
      "get": {
        "summary": "Get Openapi Schema",
        "description": "Get the OpenAPI schema as JSON\n\nThis endpoint returns the complete OpenAPI 3.0 specification for the API,\nincluding all endpoints, request/response models, and validation rules.",
        "operationId": "get_openapi_schema_openapi_json_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Component": {
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "title": "Id",
            "description": "Unique component identifier"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComponentType"
              }
            ],
            "description": "Type of electronic component"
          },
          "pins": {
            "items": {
              "$ref": "#/components/schemas/Pin"
            },
            "type": "array",
            "minItems": 1,
            "title": "Pins",
            "description": "List of pins on this component"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "Component value (e.g., '10kΩ', '100nF')"
          },
          "package": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Package",
            "description": "Component package type"
          },
          "manufacturer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Manufacturer",
            "description": "Component manufacturer"
          },
          "part_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Part Number",
            "description": "Manufacturer part number"
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "pins"
        ],
        "title": "Component",
        "description": "Represents an electronic component in the netlist"
      },
      "ComponentType": {
        "type": "string",
        "enum": [
          "IC",
          "RESISTOR",
          "CAPACITOR",
          "INDUCTOR",
          "DIODE",
          "TRANSISTOR",
          "CONNECTOR",
          "OTHER"
        ],
        "title": "ComponentType",
        "description": "Types of electronic components"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Service status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "Current timestamp"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "API version"
          },
          "environment": {
            "type": "string",
            "title": "Environment",
            "description": "Environment (development/production)"
          }
        },
        "type": "object",
        "required": [
          "status",
          "timestamp",
          "version",
          "environment"
        ],
        "title": "HealthResponse",
        "description": "Health check response model"
      },
      "Net": {
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "title": "Id",
            "description": "Unique net identifier"
          },
          "connections": {
            "items": {
              "$ref": "#/components/schemas/NetConnection"
            },
            "type": "array",
            "minItems": 1,
            "title": "Connections",
            "description": "List of component pins connected to this net"
          },
          "net_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Net Type",
            "description": "Type of net (e.g., 'power', 'signal', 'ground')"
          }
        },
        "type": "object",
        "required": [
          "id",
          "connections"
        ],
        "title": "Net",
        "description": "Represents an electrical net (connection) in the netlist"
      },
      "NetConnection": {
        "properties": {
          "component": {
            "type": "string",
            "title": "Component",
            "description": "Component ID this connection belongs to"
          },
          "pin": {
            "type": "string",
            "title": "Pin",
            "description": "Pin number on the component"
          }
        },
        "type": "object",
        "required": [
          "component",
          "pin"
        ],
        "title": "NetConnection",
        "description": "Represents a connection between a net and a component pin"
      },
      "Netlist-Input": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/Component"
            },
            "type": "array",
            "minItems": 1,
            "title": "Components",
            "description": "List of components in the netlist"
          },
          "nets": {
            "items": {
              "$ref": "#/components/schemas/Net"
            },
            "type": "array",
            "minItems": 1,
            "title": "Nets",
            "description": "List of nets (connections) in the netlist"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata about the netlist"
          }
        },
        "type": "object",
        "required": [
          "components",
          "nets"
        ],
        "title": "Netlist",
        "description": "Complete netlist data structure"
      },
      "Netlist-Output": {
        "properties": {
          "components": {
            "items": {
              "$ref": "#/components/schemas/Component"
            },
            "type": "array",
            "minItems": 1,
            "title": "Components",
            "description": "List of components in the netlist"
          },
          "nets": {
            "items": {
              "$ref": "#/components/schemas/Net"
            },
            "type": "array",
            "minItems": 1,
            "title": "Nets",
            "description": "List of nets (connections) in the netlist"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata about the netlist"
          }
        },
        "type": "object",
        "required": [
          "components",
          "nets"
        ],
        "title": "Netlist",
        "description": "Complete netlist data structure"
      },
      "NetlistGetResponse": {
        "properties": {
          "submission": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NetlistSubmission"
              }
            ],
            "description": "The netlist submission data"
          }
        },
        "type": "object",
        "required": [
          "submission"
        ],
        "title": "NetlistGetResponse",
        "description": "Response model for retrieving a netlist"
      },
      "NetlistListResponse": {
        "properties": {
          "submissions": {
            "items": {
              "$ref": "#/components/schemas/NetlistSubmission"
            },
            "type": "array",
            "title": "Submissions",
            "description": "List of netlist submissions"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count",
            "description": "Total number of submissions"
          },
          "page": {
            "type": "integer",
            "title": "Page",
            "description": "Current page number"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size",
            "description": "Number of items per page"
          }
        },
        "type": "object",
        "required": [
          "submissions",
          "total_count",
          "page",
          "page_size"
        ],
        "title": "NetlistListResponse",
        "description": "Response model for listing netlists"
      },
      "NetlistSubmission": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique submission ID"
          },
          "netlist": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Netlist-Output"
              }
            ],
            "description": "The netlist data"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "User who submitted the netlist"
          },
          "submission_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Submission Timestamp",
            "description": "When the netlist was submitted"
          },
          "validation_result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ValidationResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "Validation result for this submission"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename",
            "description": "Original filename if uploaded from file"
          }
        },
        "type": "object",
        "required": [
          "id",
          "netlist"
        ],
        "title": "NetlistSubmission",
        "description": "Represents a netlist submission with metadata"
      },
      "NetlistUploadRequest": {
        "properties": {
          "netlist": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Netlist-Input"
              }
            ],
            "description": "The netlist data to upload"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "User ID for tracking submissions"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename",
            "description": "Original filename if uploaded from file"
          }
        },
        "type": "object",
        "required": [
          "netlist"
        ],
        "title": "NetlistUploadRequest",
        "description": "Request model for uploading a netlist"
      },
      "NetlistUploadResponse": {
        "properties": {
          "submission_id": {
            "type": "string",
            "title": "Submission Id",
            "description": "Unique ID for this submission"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success message"
          },
          "validation_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidationResult"
              }
            ],
            "description": "Validation result for the uploaded netlist"
          }
        },
        "type": "object",
        "required": [
          "submission_id",
          "message",
          "validation_result"
        ],
        "title": "NetlistUploadResponse",
        "description": "Response model for netlist upload"
      },
      "Pin": {
        "properties": {
          "number": {
            "type": "string",
            "title": "Number",
            "description": "Pin number or identifier"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Optional pin name"
          },
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type",
            "description": "Pin type (e.g., input, output, power)"
          }
        },
        "type": "object",
        "required": [
          "number"
        ],
        "title": "Pin",
        "description": "Represents a pin on an electronic component"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ValidationRequest": {
        "properties": {
          "netlist": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Netlist-Input"
              }
            ],
            "description": "The netlist data to validate"
          },
          "validation_rules": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Validation Rules",
            "description": "Specific validation rules to apply"
          }
        },
        "type": "object",
        "required": [
          "netlist"
        ],
        "title": "ValidationRequest",
        "description": "Request model for validating a netlist"
      },
      "ValidationResponse": {
        "properties": {
          "validation_result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidationResult"
              }
            ],
            "description": "The validation result"
          }
        },
        "type": "object",
        "required": [
          "validation_result"
        ],
        "title": "ValidationResponse",
        "description": "Response model for netlist validation"
      },
      "ValidationResult": {
        "properties": {
          "is_valid": {
            "type": "boolean",
            "title": "Is Valid",
            "description": "Whether the netlist passed validation"
          },
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Errors",
            "description": "List of validation errors"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Warnings",
            "description": "List of validation warnings"
          },
          "validation_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Validation Timestamp",
            "description": "When validation was performed"
          },
          "validation_rules_applied": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Validation Rules Applied",
            "description": "List of validation rules that were applied"
          }
        },
        "type": "object",
        "required": [
          "is_valid"
        ],
        "title": "ValidationResult",
        "description": "Result of netlist validation"
      }
    }
  },
  "tags": [
    {
      "name": "netlist",
      "description": "Operations with netlists. Upload, validate, and manage PCB netlist data."
    },
    {
      "name": "health",
      "description": "Health check endpoints for monitoring service status."
    }
  ]
}
