"""
Authentication models for NetWiz backend
"""

import uuid
from datetime import datetime, timezone
from enum import Enum

from pydantic import BaseModel, Field, constr


class UserType(str, Enum):
    """User type enumeration"""

    USER = "user"
    ADMIN = "admin"


class User(BaseModel):
    """User model with autogenerated ID, username, and hashed password"""

    id: str = Field(
        default_factory=lambda: str(uuid.uuid4()), description="Unique user identifier"
    )
    username: constr(strip_whitespace=True, min_length=3, max_length=50) = Field(
        ..., description="Username (3-50 characters)"
    )
    hashed_password: str = Field(..., description="Hashed password")
    user_type: UserType = Field(
        default=UserType.USER, description="User type (user or admin)"
    )
    created_at: datetime = Field(
        default_factory=lambda: datetime.now(timezone.utc),
        description="User creation timestamp",
    )
    is_active: bool = Field(
        default=True, description="Whether the user account is active"
    )

    def __init__(self, **data):
        super().__init__(**data)
        # Auto-set admin type if username is "admin" (case insensitive)
        if self.username.lower() == "admin":
            self.user_type = UserType.ADMIN


class UserCreate(BaseModel):
    """Model for user creation request"""

    username: constr(strip_whitespace=True, min_length=3, max_length=50) = Field(
        ..., description="Username (3-50 characters)"
    )
    password: constr(strip_whitespace=True, min_length=6) = Field(
        ..., description="Password (minimum 6 characters)"
    )


class UserLogin(BaseModel):
    """Model for user login request"""

    username: constr(strip_whitespace=True) = Field(..., description="Username")
    password: constr(strip_whitespace=True) = Field(..., description="Password")


class Token(BaseModel):
    """JWT token response model"""

    access_token: str = Field(..., description="JWT access token")
    refresh_token: str = Field(..., description="JWT refresh token")
    token_type: str = Field(default="bearer", description="Token type")
    expires_in: int = Field(..., description="Access token expiration time in seconds")
    refresh_expires_in: int = Field(
        ..., description="Refresh token expiration time in seconds"
    )


class RefreshTokenRequest(BaseModel):
    """Refresh token request model"""

    refresh_token: str = Field(..., description="JWT refresh token")


class ChangePasswordRequest(BaseModel):
    """Change password request model"""

    current_password: str = Field(..., description="Current password")
    new_password: constr(strip_whitespace=True, min_length=6) = Field(
        ..., description="New password (minimum 6 characters)"
    )


class TokenData(BaseModel):
    """JWT token payload data"""

    username: str | None = None
    user_id: str | None = None


class UserResponse(BaseModel):
    """User response model (without password)"""

    id: str = Field(..., description="Unique user identifier")
    username: str = Field(..., description="Username")
    user_type: UserType = Field(..., description="User type (user or admin)")
    created_at: datetime = Field(..., description="User creation timestamp")
    is_active: bool = Field(..., description="Whether the user account is active")


class AuthEndpoints(BaseModel):
    """Authentication endpoints configuration"""

    signup: str = Field(..., description="Sign up endpoint")
    signin: str = Field(..., description="Sign in endpoint")
    signout: str = Field(..., description="Sign out endpoint")
    refresh: str = Field(..., description="Refresh token endpoint")
    change_password: str = Field(..., description="Change password endpoint")
    me: str = Field(..., description="Get current user endpoint")
